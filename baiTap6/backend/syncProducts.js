// syncProducts.js
const mongoose = require("mongoose");
const esClient = require("./elsasticsearch"); // ƒë∆∞·ªùng d·∫´n t·ªõi file esClient b·∫°n ƒë√£ d√πng
const Product = require("./src/models/Product");  // ƒë∆∞·ªùng d·∫´n t·ªõi model Product

const run = async () => {
  try {
    // 1. K·∫øt n·ªëi MongoDB
    await mongoose.connect("mongodb://localhost:27017/fullstack02"); // ƒë·ªïi YOUR_DB_NAME cho ƒë√∫ng
    console.log("‚úÖ Connected to MongoDB");

    // 2. Xo√° index c≈© n·∫øu c√≥
    try {
      await esClient.indices.delete({ index: "products" });
      console.log("üóëÔ∏è Deleted old index: products");
    } catch (err) {
      if (err.meta && err.meta.statusCode !== 404) {
        throw err;
      }
      console.log("‚ÑπÔ∏è No old index to delete");
    }

    // 3. T·∫°o l·∫°i index v·ªõi mapping chu·∫©n
    await esClient.indices.create({
      index: "products",
      body: {
        mappings: {
          properties: {
            name: {
              type: "text",
              fields: {
                keyword: { type: "keyword", ignore_above: 256 },
              },
            },
            category: { type: "keyword" },
            price: { type: "float" },
            views: { type: "integer" },
            createdAt: { type: "date" },
            uuid: { type: "keyword" },
          },
        },
      },
    });
    console.log("‚úÖ Created index with mapping");

    // 4. L·∫•y d·ªØ li·ªáu t·ª´ MongoDB
    const products = await Product.find({});
    console.log(`üì¶ Found ${products.length} products in MongoDB`);

    // 5. Index l·∫°i v√†o Elasticsearch
    for (const p of products) {
      await esClient.index({
        index: "products",
        id: p._id.toString(), // d√πng _id c·ªßa Mongo l√†m id ES
        document: {
          name: p.name,
          price: p.price,
          category: p.category,
          views: p.views,
          createdAt: p.createdAt,
          uuid: p._id.toString(),
        },
      });
      console.log(`‚úÖ Indexed product: ${p.name}`);
    }

    // 6. Refresh index ƒë·ªÉ d·ªØ li·ªáu c√≥ th·ªÉ query ngay
    await esClient.indices.refresh({ index: "products" });
    console.log("üîÑ Refreshed index");

    console.log("üéâ Sync done!");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå Error:", err);
    process.exit(1);
  }
};

run();
